[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "pep8",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pep8",
        "description": "pep8",
        "detail": "pep8",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MySQLdb",
        "description": "MySQLdb",
        "detail": "MySQLdb",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm.session",
        "description": "sqlalchemy.orm.session",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.session",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine.base",
        "description": "sqlalchemy.engine.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.base",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models.__init__",
        "description": "models.__init__",
        "isExtraImport": true,
        "detail": "models.__init__",
        "documentation": {}
    },
    {
        "label": "patchwork.transfers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patchwork.transfers",
        "description": "patchwork.transfers",
        "detail": "patchwork.transfers",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\" Represents the DB engine \n        Attributes:\n                __engine (): engine of the db\n                __session (): session of the db\n    \"\"\"\n    all_classes = {\"City\": City,\n               \"State\": State,\n               \"Place\": Place,\n               \"User\": User,",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "class FileStorage:\n    \"\"\"This class manages storage of hbnb models in JSON format\"\"\"\n    __file_path = 'file.json'\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"\n        returns the list of objects of one type of class\n        \"\"\"\n        from models.base_model import BaseModel\n        from models.user import User",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "kind": 6,
        "importPath": "models.amenity",
        "description": "models.amenity",
        "peekOfCode": "class Amenity(BaseModel, Base):\n    \"\"\"\n    Amenity inherits from BaseModel and Base\n    \"\"\"\n    __tablename__ = \"amenities\"\n    name = Column(String(128), nullable=False)\n#    place_amenities = relationship(\"Place\", secondary=\"place_amenity\",\n#                                   viewonly=False)\n    def __init__(self, *args, **kwargs):\n        \"\"\" Initialises the State class",
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"A base class for all hbnb models\n        Attributes:\n                    id (sqlalchemy String): The BaseModel id.\n                    created_at (alchemy DateTime): the datetime at creation.\n                    updated_at (sqlalchemy DateTime): The datetime of last update\n    \"\"\"\n    id = Column(String(60), primary_key=True, nullable=False)\n    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())\n    updated_at = Column(DateTime, nullable=False, default=datetime.utcnow())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"A base class for all hbnb models\n        Attributes:\n                    id (sqlalchemy String): The BaseModel id.\n                    created_at (alchemy DateTime): the datetime at creation.\n                    updated_at (sqlalchemy DateTime): The datetime of last update\n    \"\"\"\n    id = Column(String(60), primary_key=True, nullable=False)\n    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "models.city",
        "description": "models.city",
        "peekOfCode": "class City(BaseModel, Base):\n    \"\"\"\n    City inherits from BaseModel and Base\n    __tablename__: represents the table name, cities\n    name :  represents a column containing a string (128 characters)\n            can’t be null\n    state_id :  represents a column containing a string (60 characters)\n                can’t be null\n                is a foreign key to states.id\n    \"\"\"",
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "Place",
        "kind": 6,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "class Place(BaseModel, Base):\n    \"\"\" Place inherits from BaseModel and Base\n    \"\"\"\n    __tablename__ = \"places\"\n    city_id = Column(String(60), ForeignKey(\"cities.id\"), nullable=False)\n    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)\n    name = Column(String(128), nullable=False)\n    description = Column(String(1024))\n    number_rooms = Column(Integer, default=0, nullable=False)\n    number_bathrooms = Column(Integer, default=0, nullable=False)",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "metadata = Base.metadata\n#place_amenity = Table('place_amenity', metadata,\n#                      Column('place_id', String(60),\n#                             ForeignKey('places.id'),\n#                             primary_key=True, nullable=False),\n#                      Column('amenity_id', String(60),\n#                             ForeignKey('amenities.id'),\n#                             primary_key=True, nullable=False))\nclass Place(BaseModel, Base):\n    \"\"\" Place inherits from BaseModel and Base",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "#place_amenity",
        "kind": 5,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "#place_amenity = Table('place_amenity', metadata,\n#                      Column('place_id', String(60),\n#                             ForeignKey('places.id'),\n#                             primary_key=True, nullable=False),\n#                      Column('amenity_id', String(60),\n#                             ForeignKey('amenities.id'),\n#                             primary_key=True, nullable=False))\nclass Place(BaseModel, Base):\n    \"\"\" Place inherits from BaseModel and Base\n    \"\"\"",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class Review(BaseModel, Base):\n    \"\"\" Review inherits from BaseModel and Base\n    \"\"\"\n    __tablename__ = \"reviews\"\n    text = Column(String(1024), nullable=False)\n    place_id = Column(String(60), ForeignKey('places.id'), nullable=False)\n    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)\n    def __init__(self, *args, **kwargs):\n        \"\"\" Initialises the State class\n            Args:",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "models.state",
        "description": "models.state",
        "peekOfCode": "class State(BaseModel, Base):\n    \"\"\" State class \n        Attributes:\n                    __tablename__ : name of the table\n                    name (sqlalchemy String): name of the state\n    \"\"\"\n    __tablename__ = \"states\"\n    name = Column(String(128), nullable=False)\n    cities = relationship(\"City\", backref=\"state\", cascade=\"delete\")\n    if getenv(\"HBNB_TYPE_STORAGE\") != 'db':",
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(BaseModel, Base):\n    \"\"\"This class defines a user by various attributes\n    __tablename__\n    email, password, first_name and last_name\n    \"\"\"\n    __tablename__ = \"users\"\n    email = Column(String(128), nullable=False)\n    password = Column(String(128), nullable=False)\n    first_name = Column(String(128), nullable=False)\n    last_name = Column(String(128), nullable=False)",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "TestDBStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_db_storage",
        "description": "tests.test_models.test_engine.test_db_storage",
        "peekOfCode": "class TestDBStorage(unittest.TestCase):\n    \"\"\"Unittests for testing the DBStorage class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"DBStorage testing setup.\n        Instantiate new DBStorage.\n        Fill DBStorage test session with instances of all classes.\n        \"\"\"\n        if type(models.storage) == DBStorage:\n            cls.storage = DBStorage()",
        "detail": "tests.test_models.test_engine.test_db_storage",
        "documentation": {}
    },
    {
        "label": "TestFileStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_file_storage",
        "description": "tests.test_models.test_engine.test_file_storage",
        "peekOfCode": "class TestFileStorage(unittest.TestCase):\n    \"\"\"Unittests for testing the FileStorage class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"FileStorage testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates instances of all class types for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_engine.test_file_storage",
        "documentation": {}
    },
    {
        "label": "TestAmenity",
        "kind": 6,
        "importPath": "tests.test_models.test_amenity",
        "description": "tests.test_models.test_amenity",
        "peekOfCode": "class TestAmenity(unittest.TestCase):\n    \"\"\"Unittests for testing the Amenity class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Amenity testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage and Amenity instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_amenity",
        "documentation": {}
    },
    {
        "label": "TestBaseModel",
        "kind": 6,
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "peekOfCode": "class TestBaseModel(unittest.TestCase):\n    \"\"\"Unittests for testing the BaseModel class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"BaseModel testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates a BaseModel instance for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "TestCity",
        "kind": 6,
        "importPath": "tests.test_models.test_city",
        "description": "tests.test_models.test_city",
        "peekOfCode": "class TestCity(unittest.TestCase):\n    \"\"\"Unittests for testing the City class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"City testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage, City and State instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_city",
        "documentation": {}
    },
    {
        "label": "TestPlace",
        "kind": 6,
        "importPath": "tests.test_models.test_place",
        "description": "tests.test_models.test_place",
        "peekOfCode": "class TestPlace(unittest.TestCase):\n    \"\"\"Unittests for testing the Place class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Place testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage and Place instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_place",
        "documentation": {}
    },
    {
        "label": "TestReview",
        "kind": 6,
        "importPath": "tests.test_models.test_review",
        "description": "tests.test_models.test_review",
        "peekOfCode": "class TestReview(unittest.TestCase):\n    \"\"\"Unittests for testing the Review class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Review testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage and Review instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_review",
        "documentation": {}
    },
    {
        "label": "TestState",
        "kind": 6,
        "importPath": "tests.test_models.test_state",
        "description": "tests.test_models.test_state",
        "peekOfCode": "class TestState(unittest.TestCase):\n    \"\"\"Unittests for testing the State class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"State testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage and State instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_state",
        "documentation": {}
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "tests.test_models.test_user",
        "description": "tests.test_models.test_user",
        "peekOfCode": "class TestUser(unittest.TestCase):\n    \"\"\"Unittests for testing the User class.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"User testing setup.\n        Temporarily renames any existing file.json.\n        Resets FileStorage objects dictionary.\n        Creates FileStorage, DBStorage and User instances for testing.\n        \"\"\"\n        try:",
        "detail": "tests.test_models.test_user",
        "documentation": {}
    },
    {
        "label": "TestHBNBCommand",
        "kind": 6,
        "importPath": "tests.test_console",
        "description": "tests.test_console",
        "peekOfCode": "class TestHBNBCommand(unittest.TestCase):\n    \"\"\"Unittests for testing the HBNB command interpreter.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"HBNBCommand testing setup.\n        Temporarily rename any existing file.json.\n        Reset FileStorage objects dictionary.\n        Create an instance of the command interpreter.\n        \"\"\"\n        try:",
        "detail": "tests.test_console",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "def hello_hbnb():\n    \"\"\"\n    display just a text\n    \"\"\"\n    return \"Hello HBNB!\"\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    \"\"\"\n    display just a text\n    \"\"\"\n    return \"Hello HBNB!\"\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "do_pack",
        "kind": 2,
        "importPath": "1-pack_web_static",
        "description": "1-pack_web_static",
        "peekOfCode": "def do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    try:\n        filepath = 'versions/web_static_' + datetime.now().\\\n                   strftime('%Y%m%d%H%M%S') + '.tgz'\n        local('mkdir -p versions')\n        local('tar -zcvf versions/web_static_$(date +%Y%m%d%H%M%S).tgz\\",
        "detail": "1-pack_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "1-pack_web_static",
        "description": "1-pack_web_static",
        "peekOfCode": "env.hosts = ['localhost']\ndef do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    try:\n        filepath = 'versions/web_static_' + datetime.now().\\\n                   strftime('%Y%m%d%H%M%S') + '.tgz'\n        local('mkdir -p versions')",
        "detail": "1-pack_web_static",
        "documentation": {}
    },
    {
        "label": "do_pack",
        "kind": 2,
        "importPath": "2-do_deploy_web_static",
        "description": "2-do_deploy_web_static",
        "peekOfCode": "def do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    try:\n        filepath = 'versions/web_static_' + datetime.now().\\\n                   strftime('%Y%m%d%H%M%S') + '.tgz'\n        local('mkdir -p versions')\n        local('tar -zcvf versions/web_static_$(date +%Y%m%d%H%M%S).tgz\\",
        "detail": "2-do_deploy_web_static",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "kind": 2,
        "importPath": "2-do_deploy_web_static",
        "description": "2-do_deploy_web_static",
        "peekOfCode": "def do_deploy(archive_path):\n        \"\"\"\n        Depploy to yoru webs server\n    \"\"\"\n        if exists(archive_path) is False:\n            return False\n        file_name = archive_path.split('/')[1]\n        file_path = '/data/web_static/releases'\n        try:\n            put(archive_path, '/tmp/')",
        "detail": "2-do_deploy_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "2-do_deploy_web_static",
        "description": "2-do_deploy_web_static",
        "peekOfCode": "env.hosts = ['18.206.207.45', '100.26.217.196']\ndef do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    try:\n        filepath = 'versions/web_static_' + datetime.now().\\\n                   strftime('%Y%m%d%H%M%S') + '.tgz'\n        local('mkdir -p versions')",
        "detail": "2-do_deploy_web_static",
        "documentation": {}
    },
    {
        "label": "do_pack",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    time_stamp = datetime.now().strftime(\"%Y%m%d%H%M%S\") + \".tgz\"\n    archive_path = 'versions/web_static_' + time_stamp\n    local('mkdir -p versions/')\n    full_filename = local('tar -cvzf {} web_static/'.format(archive_path))\n    if full_filename.succeeded:",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def do_deploy(archive_path):\n    \"\"\"\n    Depploy to yoru webs server\n    \"\"\"\n    if exists(archive_path) is False:\n        return False\n    file_name = archive_path.split('/')[1]\n    file_path = '/data/web_static/releases'\n    try:\n        put(archive_path, '/tmp/')",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "deploy",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def deploy():\n    '''\n    Full deployment!\n    '''\n    do_pack_deploy = do_pack()\n    if not do_pack_deploy:\n        return False\n    deployed = do_deploy(do_pack_deploy)\n    return deployed",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "env.hosts = ['18.206.207.45', '100.26.217.196']\nenv.user = 'ubuntu'\ndef do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    time_stamp = datetime.now().strftime(\"%Y%m%d%H%M%S\") + \".tgz\"\n    archive_path = 'versions/web_static_' + time_stamp\n    local('mkdir -p versions/')",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "env.user",
        "kind": 5,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "env.user = 'ubuntu'\ndef do_pack():\n    '''\n    Fabric script that generates a .tgz archive from the\n    contents of the web_static\n    '''\n    time_stamp = datetime.now().strftime(\"%Y%m%d%H%M%S\") + \".tgz\"\n    archive_path = 'versions/web_static_' + time_stamp\n    local('mkdir -p versions/')\n    full_filename = local('tar -cvzf {} web_static/'.format(archive_path))",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "kind": 6,
        "importPath": "console",
        "description": "console",
        "peekOfCode": "class HBNBCommand(cmd.Cmd):\n    \"\"\" Contains the functionality for the HBNB console\"\"\"\n    # determines prompt for interactive/non-interactive modes\n    prompt = '(hbnb) ' if sys.__stdin__.isatty() else ''\n    classes = {\n               'BaseModel': BaseModel, 'User': User, 'Place': Place,\n               'State': State, 'City': City, 'Amenity': Amenity,\n               'Review': Review\n              }\n    dot_cmds = ['all', 'count', 'show', 'destroy', 'update']",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "cxn",
        "kind": 5,
        "importPath": "fabfile",
        "description": "fabfile",
        "peekOfCode": "cxn = fabric.Connection('ubuntu@18.206.207.45')\npatchwork.transfers.rsync(cxn, '/web_static', target, exclude='.git')",
        "detail": "fabfile",
        "documentation": {}
    }
]